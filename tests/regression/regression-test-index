tiniest=very basic grammar to get the regression tests started - SOV word order, no frills
case-erg-abs=Case, ergative-absolutive
case-fluid-s=Case, fluid-S
case-focus=Case, focus
case-nom-acc=Case, nominative-accusative
case-nom-acc-adp=Case, nominative-accusative w/ adpositions
case-none=Case, none
case-split-n=Case, split-N
case-split-s=Case, split-S
case-split-v=Case, split-V
case-tripartite=Case, tripartite
dir-inv-algonquian=Direct-inverse, pseudo-Algonquian
dir-inv-fore=Direct-inverse, pseudo-Fore
aux-s-f-noinfl=two aux, finite sentential compelement, no inflection, level1 test
aux-vp-f-noinfl=two aux, finite vp comp, no inflection, level 1 test
aux-v-f-noinfl=two aux, finite v vomp, no inflection, level 1 test
aux-f-vpcomp-nfconst-formfeat=finite auxes with nf vp compleof the nf comp is constrained - level 2 test (inflection, no t&a features)
nopaux-noinfl-vpcomp-f-formfeat=single uninflected aux with finite vp complement, level 2 test (inflection but no t&a features)
auxten-vpcompnfasp-tafeat=tensed auxilialevel 3 test
noaux-toblig-aopt-onv=obligatory tense, optional aspect on v, no aux level 3 test
auxcomp-feature-engstative-vp-1013=testing verb class feature stative and aux constrained to nonstative
auxcomp-markfeature-vp-1015=testing KEYS.KEY mhat is being used to distinguish etre and avoir type auxiliary verb classes
fin-forms-noaux-1008=testing finite/nonfinite distinction when there are no auxiliaries
nf-form-withaux-vp-1008=testing nonfinite form constraint for aux complement
nf-twoforms-withtwoaux-vp-1008=testing-- two nonfinite forms
multi-select-case=multi-select of feature values, namely case
v2-aux-eitherside-v=v2nd word order with one auxiliary that takes a v (not vp) complement which can appear freely on either side ofthe aux
v2-aux-eitherside-vp=v2nd word order with one auxiliary that takes a vp complement on either side
v2-basic-order=V2 basic word order: verb in second position, subject and object on either side.
vos-vp-aux-case-rais=testing case constraints imposed by the auxiliary: here it raises the case value from its vcomp's subject
aux-assigns-subj-case-vp=grammar tests case restrictions imposed by auxiliary: here the auxiliary aentence
ovs-aux-after-vp=testing ovs word order with auxiliaries that follow their vp complement
ovs-aux-before-vp=tests word order ovs with auxiliaries that precede their vp complement
vos-aux-before-vp=testing word order for vos languages with auxiliaries preceding their vp complement
vos-aux-after-vp=testing word order for vos languages in which the auxiliary follows its vp complement
free-aux-after-vp=testing word order with auxiliaries following their vp-compl, else free word order
free-aux-before-vp=testing free word order with auxiliary that needs to come before its verbal complements
multi-featured-aux=very! short test of features on the auxiliary itself
vso-aux-before-vp=testing vso word order where auxiliary precedes main-verb and takes vso complement style Irish and Welsh
free-aux-after-v-cluster=testing free word order where the aux follows its vcomp and forms verbal clusters
free-aux-before-v-cluster="testing free word order with preceding auxiliaries that take a v-comp and form a v-cluster"
sov-aux-after-v="testing sov word order where auxiliaries precede v-comp"
sov-aux-before-v="testing sov word order with auxiliaries preceding their v-comp"
svo-aux-after-v="testing svo word order with aux following its v-complement"
svo-aux-before-v="testing svo word order with auxiliary preceding v-comp"
v-initial-aux-after-vp="testing v-initial word order with auxiliaries following their vp-complement"
v-initial-aux-before-vp="testing v-initial word order where the auxiliary precedes its vp complement"
v-initial-aux-after-v="testing v-initial word order when the auxiliary follows its v-complement"
v-initial-aux-before-v="testing v-initial word order with aux preceding its v-complement"
vso-aux-after-v="testing vso word order where the auxiliary follows its v-complement"
vso-aux-before-v-cluster="testing vso word order where the aux precedes its v-comp forming a verbal cluster"
vso-aux-before-v-no-cluster="test vso word order where aux precedes its v-complement and does not form a verbal cluster"
free-one-aux-max-v=tests free word order with no verbal clusters, thus maximum one aux
view-inf-situ-inher=inflected viewpoint and inherent situation aspect
view-situ-aspect-infl=situation and viewpoint aspect as inflection
test-stative=testing assignment of prog-asp to non-stative-ing comp, ignoring tense/person/number/spelling, only transitive
Zulu=Zulu test for morphotactics
Slave=Slave test for morphotactics
Finnish=Finnish test for morphotactics
case-mixed=case, mixed adpositional and morphological marking
case-mixed-optadp=case with mixed optional adpositional and morphological marking
case-optadp=case with optional adpositional marking
auxfeatures=testing features on auxiliary verb
compfeatures=testing features on the auxiliary complement
compfeatures-onlyformmarked=testing features on auxiliary complement but only FORM is marked on the verb
auxfeatures-onlyformmarked=testing features on the auxiliaryFORM marked on the complement verb
subj-drop=All subjects caobjects can be dropped.  No markers for subject dropping.
lex-subj-drop=Lexical subject dropping with no marker.  No object dropping
all-subj-drop-wth-req-marker=All subject droppiuired marker for both dropped and overt subjects.  No object dropping.
all-subj-drop-wth-opt-marker=Subject dropping for all verbs with a marker left optionally for both dropped and overt subjects
arg-opt-all-comps-drop-wth-no-marker=All complements can be dropped. No marker.
arg-opt-all-comps-drop-marker-req-wth-drop-opt-wthout="Object dropping allowed for all verbs.  Marker is required for dropping and optional otherwise."
arg-opt-all-comps-drop-marker-req-wth-drop-req-wthout="Object dropping is allowed for all verbs and a marker is required when objects are dropped and when they are not."
arg-opt-all-comps-drop-marker-req-wth-drop-np-wthout="Object dropping is allowed for all verbs and an object marker is required when the object is dropped and not permitted with an overt object."
arg-opt-all-comps-drop-marker-opt-wth-drop-opt-wthout="Object dropping is allowed for verb types and object marking is optional when for dropped and overt objects."
arg-opt-all-comps-drop-marker-opt-wth-drop-np-wthout="Object dropping is allowed for all verb types and a marker is optional if the object is dropped and not permitted if it is overt."
arg-opt-all-comps-drop-marker-np-wth-drop-req-wthout="Object dropping is allowed for all verb types.  A marker is required with overt arguments and not permitted with dropped arguments."
arg-opt-all-comps-drop-marker-np-wth-drop-opt-wthout="Object dropping is allowed for all verb types a marker is not permitted with dropped arguments and is optional for overt."
arg-opt-all-comps-drop-marker-opt-wth-drop-req-wthout="Object dropping for all verb types.  Marker is optional for dropped objects and required for overt objects."
arg-opt-all-subj-drop-marker-np-wth-drop-opt-wthout=Subject dropping is allowed for all verb types.  A marker is not permitted with a dropped subject and is optional with an overt one.  Object dropping is not allowed.
arg-opt-all-subj-drop-marker-np-wth-drop-req-wthout=Subject dropping for all verb types. Marker not permitted with dropped subj and req with overt arg.
arg-opt-all-subj-drop-marker-opt-wth-drop-np-wthout=Subject dropping for all verb types. Marker optional with drop and not permitted with overt subj.
arg-opt-all-subj-drop-marker-opt-wth-drop-opt-wthout=Subject dropping allowed for al verb types. Marker optional for both dropped and overt subjects.
arg-opt-all-subj-drop-marker-opt-wth-drop-req-wthout=Subject dropping allowed for all verb types. Marker opt for dropped subj and req for overt subj.
arg-opt-all-subj-drop-marker-req-wth-drop-np-wthout=Subject dropping allowed for all verb types. Marker required for drop and not permitted with overt subj.
arg-opt-all-subj-drop-marker-req-wth-drop-opt-wthout=Subject dropping allowed for all verb types.  Marker req for drop and opt for overt subj.
arg-opt-all-subj-drop-marker-req-wth-drop-req-wthout=Subject dropping for all verb types. Marker required for both dropped and overt subjects
arg-opt-lex-subj-drop-no-marker=Lexical based subject dropping. No marker.
arg-opt-lex-subj-drop-marker-req-wth-drop-req-wthout=Lexically based subject dropping. Marker required for dropped and overt subjs.
arg-opt-lex-cntxt-subj-drop-marker-req-wth-drop-req-wthout=Subject dropping according to one context with one feature specified on the verb.
arg-opt-lex-cntxt-2feat-subj-drop-marker-req-wth-drop-req-wthout=Subject dropping only in one context with multiple features.  One specified on the verb.  One on the subj.
Cree=Plains Cree (sfd dissertation)
Dyirbal=Dyirbal (sfd dissertation)
Fore=Fore (sfd dissertation)
German=German (sfd dissertation)
Hindi=Hindi (sfd dissertation)
Tagalog=Tagalog (sfd dissertation)
case-mixed2=mixed adpositional and morphological marking (2)
!Sahaptin=Sahaptin (sfd dissertation)
Sahaptin-short=Sahaptin, shorter version (sfd dissertation)
qpart-yes-no=Questions marked via sentence-initial question particle.
infl-q-main-verb=Question marking as inflection on the main verb, no other affixes
infl-q-main-verb-prefix=Questions as prefix on main verbs.
infl-q-aux-verb=Questions as inflection on aux verbs.
infl-q-final-opt-suffix=Question inflection as optional suffix after one other suffix
infl-q-nonfinal-suffix=Question affix as non-final in suffix string.
arg-opt-lex-comps-drop-marker-np-wth-drop-opt-wthout=lexically licensed object dropping.marker not permitted if the object is dropped and optional if it is overt.
arg-opt-lex-comps-drop-marker-np-wth-drop-req-wthout=lexically licensed object dropping. marker not permitted with dropped object and required with an overt object.
arg-opt-lex-comps-drop-marker-opt-wth-drop-np-wthout=lexically licensed object dropping. marker is optional with dropped object and not permitted with overt object.
arg-opt-lex-comps-drop-marker-opt-wth-drop-opt-wthout=lexically licensed object dropping. marker is optional for both dropped and overt objects.
arg-opt-lex-comps-drop-marker-opt-wth-drop-req-wthout=lexically licensed object dropping. marker is optional with a dropped object and required with an overt object
arg-opt-lex-comps-drop-marker-req-wth-drop-np-wthout=lexically licensed object dropping. marker is required with a dropped object and not permitted with an overt object
arg-opt-lex-comps-drop-marker-req-wth-drop-opt-wthout=lexically licensed object dropping.marker is required with a dropped object and optional with an overt object.
arg-opt-lex-comps-drop-marker-req-wth-drop-req-wthout=lexicallylicensed object dropping. marker is required with a dropped object and required with an overt object
arg-opt-lex-subj-drop-marker-np-wth-drop-opt-wthout=lexically licensed subject dropping. marker is not permitted when subject is dropped and is optional when it is overt
arg-opt-lex-subj-drop-marker-np-wth-drop-req-wthout=lexically licensed subject dropping. subject marker is not permitted with an dropped subject and required with an overt subject.
arg-opt-lex-subj-drop-marker-opt-wth-drop-np-wthout=lexically licensed subject dropping. maker is optional with dropped subject and not permitted with overt subject
arg-opt-lex-subj-drop-marker-opt-wth-drop-opt-wthout=lexically licensed subject drop. marker is optional with dropped subject and optional with an overt subject
arg-opt-lex-subj-drop-marker-opt-wth-drop-req-wthout=lexically licensed subject dropping. marker is optional with a dropped subject and required with an overt subject
arg-opt-lex-subj-drop-marker-req-wth-drop-np-wthout=lexically licensed subject dropping. marker is required with a dropped subject and not permitted with an overt subject
arg-opt-lex-subj-drop-marker-req-wth-drop-opt-wthout=lexically licensed subject dropping. marker is required for a dropped subject and optional for a overt subject
arg-opt-lex-comps-drop-np-wth-drop-np-wthout=lexically licensed object dropping.  marker is not permitted for dropped or overt objects
eng-qpart-inf=Testing interaction of non-finite form and question particle.  Question particle should now only attach to finite sentences.
subj-v-inv-obj-drop=Testing interaction of subj-v inversion and object drop, as well as interaction of subj-v intersion and FORM and AUX features.
asp-mood-contrast-options=tests options to add simple imper/perf and subj/ind hierarchies
mood-buildhierarchy=testing the build your own mood hierarchy
morphotactics-opt-oblig-single-input=Tests simple morphotactics with position classes having only 1 input. Also tests that obligatory PCs arequired by the lexical types they take as input.
morphotactics-req-fbd=Tests forwards and backwards require, and (backward) forbid, morphotactic co-occurrence restrictions on an input graph with both conjunction and disjunction.
morphotactics-lrt-inputs=Tests inputs and constraints using hierarchies (trees and multiple inheritance) of lexical rule types.
morphotactics-impl-expl-disjunction=Models and tests both implicit and explicit non-sequential disjunctions, and an explicit sequential disjunction.
bipartite-stems=Basic test cases for bipartite stems, based on mini-English
neg-aux-min=scope of negation for negative auxiliary verbs. uses minimal grammar augmented with some choices for auxiliaries
neg-zero-min=checks semantics of negation for a basic zero-neg grammar (a phonologically empty negation suffix)
neg-head-feature=uses a syntactic head feature to ensure that two affixes are mutually incompatible---intended to model the incompatibility of negation with certain other inflectional morphemes; implemented by having those morphemes specify NEGATED -, while negation obviously, has NEGATION +.
neg-infl-nonfinal-suffix=Inflectional negation as optional non-final suffix, optionality with check box
neg-infl-final-opt-suffix=Negative affix as optional suffix at end of suffix string
neg-adv-vp-pre=negation as independent pre VP modifier
neg-infl-sole-suffix=negation as the only suffix, optional
neg-infl-mini=negation as inflection, simple case
neg-comp-auxattach-precomps=neg adv as selected first comp of an aux type after application of a lexical rule
neg-comp-finattach-precomps=neg-comp-add-lex-rule adds neg-adv as selected first comp of a finite verb
neg-comp-auxattach-postcomps=negative complement lexical rule adds a second complement (a neg adverb) to the comps list of an auxiliary verb
char-test-keep-all=test of repp preprocessing where user only wants to split on whitespace
char-test-discard-all=test of repp preprocessing where we split on then discard all lower ascii punctuation including space and tab
char-test-keep-list=test of repp preprocessing where we discard all punc not on a list submitted by user
multi-wd-lex=tests multi word lexical item output on a noun
neg-v-attach-freewo=ensures that lexical attachment for neg adverbs still works without problems with free word order
neg-mod-vp-either=negative modifier which can occur on either side of the vp
neg-infl-head=bipartite negation neg-aux and required inflection on main verb
neg-infl-infl=bipartite negation, two bound negators, one attaches to aux and requires the other on the lexical verb
neg-infl-comp=bipartite negation, infl lex-rule puts neg-comp on comps list of verb, a la French [fra]
neg-infl-mod=bipartite negation, infl rule introduces feature dependency to require neg adv, uses mod rules
neg-head-comp-sauxbefore-compafter=bipartite neg, negaux selects for sentential complement followed by dummy negcomp
neg-head-comp-sauxbefore-compbefore=bipartite neg, negaux selects for dummy negcomp followed by s comp
neg-head-comp-vpauxbefore-compafter=bibpartite neg, negaux selects vp complement (raises subject) second comp is dummy auxiliary negcomp
neg-head-comp-vpauxbefore-compbefore=bipartite neg, negaux selects dummy negcomp followed by vpcomp, raises subject
neg-head-mod-vpaux-modafter=bipartite neg, neg auxiliary requires dummy neg modifier, aux selects vp comp, mod after comp
neg-comp-comp=two negative complements, introduced by two lexical rules, one attaches to aux, the other to lexical verbs, mutual requires
neg-comp-mod=bipartite negation, negative complement carries semantics, requires a negative (dummy) modifier via NEG-SAT feature passing
neg-mod-mod=bipartite negation, two negative modifiers in mutual requires relationship
infostr-cf-mod-after-noun=infostr
infostr-ct-mod-after-noun=infostr
infostr-foc-adp-after-noun=infostr
!infostr-foc-affix-after-noun=infostr, probably unfinished work? see https://github.com/delph-in/matrix/issues/494
!infostr-foc-affix-obj=infostr No longer works without lexical threading https://github.com/delph-in/matrix/issues/494
!infostr-foc-affix-obj-verb=infostr, probably unfinished work? see https://github.com/delph-in/matrix/issues/494
!infostr-foc-affix-subj=infostr No longer works without lexical threading https://github.com/delph-in/matrix/issues/494
!infostr-foc-affix-subj-obj=infostr, probably unfinished work? see https://github.com/delph-in/matrix/issues/494
!infostr-foc-affix-subj-obj-verb=infostr, probably unfinished work? see https://github.com/delph-in/matrix/issues/494
!infostr-foc-affix-subj-verb=infostr, see probably unfinished work? https://github.com/delph-in/matrix/issues/494
infostr-foc-final-topic-first-cf-prev=infostr
infostr-foc-initial-topic-first=infostr
infostr-foc-mod-after-both=infostr
infostr-foc-mod-after-noun=\infostr
infostr-foc-mod-after-verb=infostr
infostr-foc-mod-before-noun=infostr
infostr-foc-mod-both-both=infostr
infostr-foc-mod-both-noun=infostr
infostr-foc-osv-final=infostr
infostr-foc-osv-initial=infostr
infostr-foc-osv-postv=infostr
infostr-foc-osv-prev=infostr
infostr-foc-ovs-final=infostr
infostr-foc-ovs-initial=infostr
infostr-foc-ovs-postv=infostr
infostr-foc-ovs-prev=infostr
infostr-foc-sov-final=infostr
infostr-foc-sov-initial=infostr
infostr-foc-sov-postv=infostr
infostr-foc-sov-prev=infostr
infostr-foc-svo-final=infostr
infostr-foc-svo-initial=infostr
infostr-foc-svo-postv=infostr
infostr-foc-svo-prev=infostr
infostr-foc-v2-final=infostr
infostr-foc-v2-initial=infostr
infostr-foc-v2-postv=infostr
infostr-foc-v2-prev=infostr
infostr-foc-vf-initial=infostr
infostr-foc-vf-prev=infostr
infostr-foc-vi-final=infostr
infostr-foc-vi-postv=infostr
infostr-foc-vos-final=infostr
infostr-foc-vos-initial=infostr
infostr-foc-vos-postv=infostr
infostr-foc-vos-prev=infostr
infostr-foc-vso-final=infostr
infostr-foc-vso-initial=infostr
infostr-foc-vso-postv=infostr
infostr-foc-vso-prev=infostr
infostr-top-mod-after-noun=infostr
!infostr-foc-affix-subj-obj-hier=regression test for Yukaghir-like grammars, probably unfinished work? see https://github.com/delph-in/matrix/issues/494
adj-1adjn=Test for adjectives being the only modifier of their modificand.
adj-1adj-n=Test for adjective incorporation with one prefix position class.
adj-1n-adj=Test for adjective incorporation with one suffix position class.
adj-ovs=Test for attributive adjectives modifying nouns in a language with OVS word order.
adj-osv=Test for attributive adjectives modifying nouns in a language with OSV word order.
adj-sov=Test for attributive adjectives modifying nouns in a language with SOV word order.
adj-vos=Test for attributive adjectives modifying nouns in a language with VOS word order.
adj-vso=Test for attributive adjectives modifying nouns in a language with VSO word order.
adj-both-either-cop=Test for adjectives that can be either be a pre-head or post-head attributive modifier and can appear as a copula complement.
adj-both-either-stative=Test for adjectives that can be either be a pre-head or post-head attributive modifier and can appear as a stative predicate.
adj-both-post-cop=Test for adjectives that is a post-head attributive modifier and can appear as a copula complement.
adj-both-post-stative=Test for adjectives that is a post-head attributive modifier and can appear as a stative predicate.
adj-both-pre-stative=Test for adjectives that is a pre-head attributive modifier and can appear as a stative predicate.
adj-both-pre-cop=Test for adjectives that is a pre-head attributive modifier and can appear as a copula complement.
adj-comp_cop=Basic test for copula after its complement.
adj-cop_comp=Basic test for copula before its complement.
adj-cop_agr=Test for copula agreement with subject.
adj-cop_infl=Test for copula inflection.
adj-cop_infl_adj_agr=Test for copula inflection with copula complement agreeing with subject.
adj-cop_agr_adj_agr_1=Test for copula and complement agreeing with each other and subject.
adj-cop_agr_adj_agr_2=Test for copula and complement agreeing with each other and subject.
adj-split_cop=Test for split copulas where different copulas take different complement sets.
adj-adj-n-adj=Test for adjective incorporation with one prefix position class and one suffix position class.
adj-adj_n_agr=Test for adjective agreement with prehead attributive adjectives.
adj-2adj-n=Test for adjective incorporation with two prefix position classes.
adj-2n-adj=Test for adjective incorporation with two suffix position classes.
adj-adj-agr-n=Test for adjective incorporation with one prefix position class with daughter agreement.
adj-infl-mod_pre_stative=Test for adjectives that only agree with their modificands, appear as stative predicates, and are pre-head modifiers.
adj-infl-mod_post_stative=Test for adjectives that only agree with their modificands, appear as stative predicates, and are post-head modifiers.
adj-infl-mod_pre_cop=Test for adjectives that only agree with their modificands, appear as copula complements, and are pre-head modifiers.
adj-infl-mod_post_cop=Test for adjectives that only agree with their modificands, appear as copula complements, and are post-head modifiers.
adj-infl-subj_pre_stative=Test for adjectives that only agree with their subjects, appear as stative predicates, and are pre-head modifiers.
adj-infl-subj_post_stative=Test for adjectives that only agree with their subjects, appear as stative predicates, and are post-head modifiers.
adj-infl-subj_pre_cop=Test for adjectives that only agree with their subjects, appear as copula complements, and are pre-head modifiers.
adj-infl-subj_post_cop=Test for adjectives that only agree with their subjects, appear as copula complements, and are post-head modifiers.
adj-cop_adj_agr=Test for adjective agreeing with subject in copula complement constructions.
adj-adj_n_infl=Test for stative predicate adjectives with inflection features in AS word order.
adj-n_adj_infl=Test for stative predicate adjectives with inflection features in SA word order.
adj-adj_n_subj_agr=Test for stative predicate adjectives with subject agreement in AS word order.
adj-n_adj_subj_agr=Test for stative predicate adjectives with subject agreement in SA word order.
adj-adj_n=Test for stative predicate adjectives in AS word order.
adj-n_adj=Test for stative predicate adjectives in SA word order.
adj-switching_cop=Test for optionally copula complement adjective.
adj-switching_infl_cop=Test for switching predicative adjectives between copula and stative predicate with inflection.
adj-switching_infl_cop_infl=Test for switching predicative adjectives between copula with inflection and stative predicate with inflection.
adj-switching_infl_1=Test for stative predicate adjective with optional inflection in AS order.
adj-switching_infl_2=Test for stative predicate adjective with optional inflection in SA order.
adj-split_adj_cop_n_adj=Test for predicative adjectives where some adjectives appear as copula complements and others as stative predicates.
adj-split_cop_adj_n_adj=Test for predicative adjectives where some adjectives appear as copula complements and others as stative predicates.
adj-split_adj_cop_infl=Test for predicative adjectives where some adjectives appear as copula complements and others as stative predicates with event type inflection.
adj-split_adj_zero_adj-infl_n=Test for predicative adjectives where all predicative adjectives as stative predicates and some require event type inflection.
adj-split_zero_adj_n_adj-infl=Test for predicative adjectives where all predicative adjectives as stative predicates and some require event type inflection.
adj-split_cop_stative_infl=Test for predicative adjectives where some adjectives appear as copula complements with copula inflection and others as stative predicates with event type inflection.
adj-split_infl_cop=Test for predicative adjectives where all predicative adjectives have event type inflection and some appear as copula complements.
adj-split_infl_cop_mix=Test for predicative adjectives where some adjectives are copula complements and some are stative predicates, some of each appear with inflection, some of each without.
adj-2adjn=Test for two attributive adjectives modifying nouns in either posthead or prehead word orders.
adj-n_adj_agr=Test for adjective agreement with posthead attributive adjectives.
adj-either_adj_n=Test for attributive adjective appearing prehead or posthead.
adj-nadj=Basic test for attributive only adjectives modifying nouns before the adjective.
adj-split-both+attr=Test for adjectives where some adjectives are attributive only and others can be both attributive and predicative.
adj-split-both+pred=Test for adjectives where some adjectives are predicative only and others can be both attributive and predicative.
adj-split-both+attr+pred=Test for adjectives where some adjectives are attributive only, some predicative only, and others can be both attributive and predicative.
adj-adjn=Basic test for attributive adjectives.
valchg-obj-rem=simple object-removing valence change
valchg-subj-rem=simple subject-removing valence change
valchg-subj-rem-obj-rem=combining subject-removing and object-removing valence change
valchg-obj-add-pre-np=object-adding valence change, np added at front of comps
valchg-obj-add-post-np=object-adding valence change, new object added at end of comps
cagr-pseudo-closest-conjunct=tests the part of coordination and agreement that creates closest conjunct rules
cagr-pseudospanish-feature-resolution=tests the part of coordination and agreement that creates feature resolution (using a grammar loosely based on Spanish)
valchg-subj-rem-sov=basic subject-removing for SOV
valchg-obj-rem-sov=simple obj-rem for SOV
valchg-subj-rem-osv=simple subj-rem for OSV
valchg-obj-rem-osv=simple obj-rem for OSV
valchg-obj-add-pre-np-sov=obj-add for SOV with pre-append
valchg-obj-add-post-np-sov=obj-add for SOV with post-append
valchg-subj-rem-obj-add-pre-np=combining subj-rem and obj-add
valchg-subj-rem-obj-add-post-np-sov=sub-rem and obj-add for SOV
valchg-subj-add-pre=subject-adding, prepend, SVO
valchg-subj-add-post=subject-adding, postpend, SVO
valchg-subj-add-pre-sov=subject-adding, prepend, SOV
valchg-subj-add-pre-case=subject-adding, with case constraints
valchg-lkt=testing valence change in Lakota
evidentials-infl-aux-kaz=testing coverage of Kazakh evidentials (infl, aux)
evidentials-infl-cng=testing coverage of Qiang evidentials (infl)
evidentials-aux-apw=testing coverage of Western Apache evidentials (aux)
evidentials-infl-yux=testing coverage of Kolyma Yukaghir evidentials (infl)
evidentials-aux-peb=testing coverage of Eastern Pommo evidentials (infl)
evidentials-inflection-choose=testing evidential verbal inflection with selected evidential inventory
evidentials-inflection-build=testing evidential verbal inflection with user-input evidential inventory
evidentials-auxiliary-build=testing evidential auxiliary verbs with user-input evidential inventory
evidentials-auxiliary-choose=testing evidential auxiliary verbs with selected evidential inventory
evidentials-infl-aux-kal=Testing the evidentiality library with Kalaallisut evidentials
!evidentials-infl-aux-shp=Testing the evidentiality library with the evidentials of Shipibo-Konibo
evidentials-aux-eus=Adding held-out Basque tests for evidentiality library
evidentials-aux-afb=Held-out test of Gulf Arabic for the evidentials library
evidentials-infl-lbj=Held-out test of Ladakhi for the evidentials library
evidentials-infl-mon=Held-out test of (Khalkha) Mongolian for the evidentials library
evidentials-infl-aux-wic=Held-out test of Wichita for the evidentials library
ccomp-illustr1-rus=Clausal comps: illustrative Russian: obligatory complementizer with form; nominalization.
ccomp-illustr2-tur=Clausal comps: illustrative Turkish
ccomp-illustr3-deu=Clausal Comps: Illustrative German.
ccomp-illustr4-laj=Clausal comps: Lango
ccomp-illustr5-tgl=Clausal comps: Illustrative Tagalog.
ccomp-pseudo2-vfinal-extra-opt-bef-aft=Clausal comps: vfinal matrix, optional complementizer before or after the clause, strictly extraposed complement clause.
ccomp-pseudo3-osv-extra-opt-bef-aft=Clausal comps: OSV matrix order, optional complementizer before or after a strictly extraposed complement clause.
ccomp-pseudo4-ovs-extra-opt-bef-aft=Clausal comps: OVS order, strictly extraposed complement, flexible optional complementizer.
ccomp-pseudo6-ovs-extra-same-oblig-aft=Clausal comps: OVS, extraposed or nouny-position complement; obligatory complementizer after the complement.
ccomp-pseudo22-v2-vfinal-comp-bef-oblig=Clausal comps V2-Vfinal oblig complementizer before the clause.
ccomp-pseudo5-vinitial-high-empty=Clausal comps: v-initial matrix order, high nominalization, semantically-empty.
ccomp-pseudo23-sov-high-empty-extra=Clausal comps: SOV, high empty nominalization, extraposed complement.
ccomp-pseudo20-sov-mid-nonempty-extra-same=Clausal comps: SOV, mid nominalization, extraposed-or-not complement.
ccomp-pseudo19-vso-low-nonempty-feat=Clausal comps: VSO matrix order, low nominalization, feature on the embedded verb.
ccomp-pseudo24-sov-low-nonempty-feat-extra=Clausal comps: SOV, low nominalization, extraposed complement.
ccomp-pseudo26-vfin-low-nonempty-feat-extra=Clausal-comps: V-final language with extraposed nominalized complements.
ccomp-pseudo28-vin-extra=Clausal comps: V-initial language with extraposed complement, obligatory complementizer before the clause.
ccomp-pseudo29-vso-opt=Clausal comps: VSO matrix order with optional complementizer before the clause.
ccomp-pseudo30-sov-nonfin=Clausal comps: SOV, ccomp marked by FORM.
ccomp-pseudo31-sov-nonfin-extra=Clausal comps: SOV, extraposed complement marked by FORM.
ccomp-pseudo32-sov-nonfin-extra-opt=Clausal comps: SOV, extraposed nonfinite complement with optional complementizer.
ccomp-pseudo33-sov-nonfin-extra-opt-bef-aft=Clausal comps: SOV, extraposed complement with optional complementizer before or after the clause.
ccomp-pseudo34-sov-nonfin-extra-same-opt-bef-aft=Clausal comps: SOV extraposed and nouny-positioned complement with optional complementizer before or after the clause.
ccomp-pseudo35-vin-extra-opt-bef=Clausal comps: V-initial with strictly extraposed complement, optional complementizer before the clause.
ccomp-pseudo27-vos-extra=Clausal comps: VOS with strictly extraposed complement, obligatory complementizer before the clause.
ccomp-pseudo36-vos-extra-opt-bef=Clausal comps: VOS with extraposed complement and optional complementizer before the clause.
ccomp-sov-extra-oblig-after=Clausal comps: SOV, extraposed complement, obligatory complementizer after the clause.
ccomp-pseudo37-vos-extra-same-opt-bef-after=Clausal comps: VOS order with extraposition and normally positioned complement; flexible optional complementizer.
ccomp-pseudo38-vin-extra-same-opt-bef-after=Clausal comps: V-initial, extraposed or normally positioned complement, flexible optional complementizer.
ccomp-pseudo39-vfin-extra-same-opt-bef-aft=Clausal comps: V-final with extraposed and normally positioned complement and flexible optional complementizer.
ccomp-pseudo40-vin-extra-low=Clausal comps: V-initial matrix with extraposed nominalized complement (low).
ccomp-pseudo41-vin-extra-feat=Clausal comps: VOS matrix with extraposed complement marked with FORM.
ccomp-pseudo42-vos-extra-feat=Clausal comps: VOS with extraposed complement marked with FORM.
ccomp-pseudo43-vos-same-extra-feat=Clausal comps: VOS order, extraposed or nouny-positioned complement marked by FORM.
ccomp-pseudo44-2-2complementizers=Clausal comps: 2 strategies, with different complementizer attachment and extraposition (SOV).
ccomp-pseudo45-2-nmz-and-comp=Clausal comps: 2 strategies for SOV, one with nominalization, another with complementizer before the clause and extraposition.
ccomp-pseudo25-ovs-low-nonempty-feat-extra=Clausal comps: OVS with extraposed complement marked by low nominalization.
ccomp-pseudo46-2-nmz-and-comp-same-and-extra=Clausal comps: OVS, 1) optionally extraposed with obligatory flexible complementizer; 2) nominalized (high).
ccomp-pseudo47-2-vin=Clausal comps: V-initial; 1) Obligatory complementizer before the clause; 2) Optional complementizer before extraposed clause.
ccomp-pseudo48-vso-subj=Clausal comps: 1) Subjunctive mood with optional complementizer; 2) Indicative mood with obligatory complementizer.
clausalcomp-v2-oblig-bef-aft-same-pseudo0=Clausal complements: V2 matrix word order, embedded clause has the same order and the same distribution as noun complements. Obligatory complementizer before or after the embedded clause.
ccomp-pseudo1-vos-noun-same-oblig-after-vf=Clausal comps: VOS matrix order, finite form on embedded verb, obligatory complementizer after the clause.
clausalcomp-comp-oblig-before-sov=Clausal comps: SOV, obligatory complementizer before the clause.
ccomp-opt-svo=Clausal comps: SVO, optional complementizer
clausalmods-adv-or-head=Clausal modifiers whose subordinator is either an adverb or adposition (head)
clausalmods-nom-mid=Clausal modifiers that are nominalized at VP (mid)
clausalmods-nom-low=Clausal modifiers that are nominalized at V (low)
clausalmods-attach-vp-s=Clausal modifiers that attach to the VP, S or both of the matrix clause
clausalmods-modifier-position=Clausal modifiers that attach before, after or before and after the matrix clause
clausalmods-morph-and-subord=Clausal modifiers that are marked by a free subordinator morpheme and have special verbal morphology
clausalmods-shared-subject-bound-subord=Clausal modifiers marked by a bound subordinator morpheme that share their subject with the matrix verb
clausalmods-shared-subject-free-subord=Clausal modifiers marked wiht a free subordinator morpheme that share a subject with the matrix verb
clausalmods-subord-position=Clausal modifiers whose subordinator is at the beginning or end of the clause
clausalmods-special-morph=Clausal modifiers marked by special verbal morphology
clausalmods-v2-vfinal-adp=Clausal modifiers marked by vfinal word order and an adposition (head) subordinator
clausalmods-v2-vfinal-adv=Clausal modifiers marked by vfinal word order and an adverbial subordinator
clausalmods-subord-pairs=Clausal modifiers makrked by a subordinaotr pair (one in the subordinate and one in the matrix clause)
clausalmods-nom-high=Clausal modifiers that are nominalized high and have a nominalized predication
clausalmods-nom-no-rel=Clausal modifiers that are nominalized high (at S) and do not have a nominalized predication
adnom-poss-mod-juxt=Juxtaposition poss construction w mod-like attachment
adnom-poss-mod-dep-aff-hf=Dep marked head final poss construction w mod-like attachment
adnom-poss-mod-dep-aff-free-wo=Dep marked free wo poss construction w mod-like attachment
adnom-poss-mod-dep-aff-hf-agr=Dep affixaly marked agreement head final poss construction w mod-like attachment
adnom-poss-mod-dep-aff-hf-pron=Dep affixally marked head final poss construction w mod-like attachment, and similar poss pronouns
adnom-poss-mod-dep-aff-hf-pron-aff-agr=Dep affixally marked head final poss construction w mod-like attachment, and agreement poss pron affixes
adnom-poss-mod-dep-aff-hf-pron-aff-mod=Dep affixally marked head final poss construction w mod-like attachment, and poss pron affixes that are mod-like
adnom-poss-mod-dep-aff-hf-pron-agr=Dep affixally marked head final poss construction w mod-like attachment, and similar agreeingposs pronouns
adnom-poss-mod-dep-aff-hi=Dep affixally marked head initial poss construction w mod-like attachment
adnom-poss-mod-dep-aff-head-aff-hf=Dep and head affixally marked head final poss construction w mod-like attachment
adnom-poss-mod-dep-aff-head-aff-hi=Dep and head affixally marked head initial poss construction w mod-like attachment
adnom-poss-mod-dep-aff-head-aff-hf-agr-mut=
adnom-poss-mod-dep-aff-head-aff-hf-agr-dep=Dep and head affixally marked, dep agreeing head initial poss construction w mod-like attachment
adnom-poss-mod-dep-aff-head-aff-hf-agr-head=Dep and head affixally marked, head agreeing head initial poss construction w mod-like attachment
adnom-poss-mod-dep-non-aff-hf=Dep non-affixally marked head final poss construction w mod-like attachment
adnom-poss-mod-dep-non-aff-free-wo=Dep non-affixally marked free wo poss construction w mod-like attachment
adnom-poss-mod-dep-non-aff-hf-agr=Dep non-affixally marked head final poss construction w mod-like attachment
adnom-poss-mod-dep-non-aff-hi=Dep non-affixally marked head final poss construction w mod-like attachment
adnom-poss-mod-dep-non-aff-head-aff-free-wo=Dep non-affixally marked, head affixally marked free wo poss construction w mod-like attachment
adnom-poss-mod-dep-non-aff-head-aff-hf=Dep non-affixally marked, head affixally marked head final poss construction w mod-like attachment
adnom-poss-mod-dep-non-aff-head-aff-hf-agr-mut=Dep non-affixally marked, head affixally marked, both agreeing head final poss construction w mod-like attachment
adnom-poss-mod-dep-non-aff-head-aff-hf-agr-dep=Dep non-affixally marked, head affixally marked, dep agreeing head final poss construction w mod-like attachment
adnom-poss-mod-dep-non-aff-head-aff-hf-agr-head=Dep non-affixally marked, head affixally marked, head agreeing head final poss construction w mod-like attachment
adnom-poss-mod-dep-non-aff-head-aff-hf-sov=Dep non-affixally marked, head affixally marked head final poss construction w mod-like attachment, general wo is head final
adnom-poss-mod-dep-non-aff-head-aff-hi-sov=Dep non-affixally marked, head affixally marked head initial poss construction w mod-like attachment, general wo is head final
adnom-poss-mod-head-aff-hf=Head marked head final poss construction w mod-like attachment
adnom-poss-mod-head-aff-hi=Head marked head inital poss construction w mod-like attachment
adnom-poss-mod-head-aff-free-wo=Head marked free wo poss construction w mod-like attachment
adnom-poss-mod-head-aff-hf-agr=Head marked agreeing head final poss construction w mod-like attachment
adnom-poss-spec-juxt=Juxtaposition poss construction w spec-like attachment
adnom-poss-spec-dep-aff-hf=Dep affixally marked head final poss construction w spec-like attachment
adnom-poss-spec-dep-aff-free-wo=Dep affixally marked free wo poss construction w spec-like attachment
adnom-poss-spec-dep-aff-hf-agr=Dep affixally marked agreeing head final poss construction w spec-like attachment
adnom-poss-spec-dep-aff-hf-pron=Dep affixally marked head final poss construction w spec-like attachment, with similar pronouns
adnom-poss-spec-dep-aff-hf-pron-aff=Dep affixally marked head final poss construction w spec-like attachment, with affixal pronouns
adnom-poss-spec-dep-aff-hf-pron-agr=Dep affixally marked head final poss construction w spec-like attachment, with similar agreeing pronouns
adnom-poss-spec-dep-aff-hi=Dep affixally marked head initial poss construction w spec-like attachment
adnom-poss-spec-dep-aff-head-aff-hf=Dep and head affixally marked head final poss construction w spec-like attachment
adnom-poss-spec-dep-aff-head-aff-hf-agr-mut=Dep and head affixally marked, both agreeing, head final poss construction w spec-like attachment
adnom-poss-spec-dep-aff-head-aff-hf-agr-dep=Dep and head affixally marked, dep agreeing head final poss construction w spec-like attachment
adnom-poss-spec-dep-aff-head-aff-hf-agr-head=Dep and head affixally marked, dep agreeing head final poss construction w spec-like attachment
adnom-poss-spec-dep-aff-head-non-aff-hf=Dep affixally marked, head non-affixally, head final poss construction w spec-like attachment
adnom-poss-spec-dep-aff-head-non-aff-hf-agr-dep=Dep affixally marked, head non-affixally, dep agreeing, head final poss construction w spec-like attachment
adnom-poss-spec-dep-non-aff-hf=Dep non-affixally marked head final poss construction w spec-like attachment
adnom-poss-spec-dep-non-aff-free-wo=Dep non-affixally marked free-wo poss construction w spec-like attachment
adnom-poss-spec-dep-non-aff-hf-agr=Dep non-affixally marked, agreeing, head final poss construction w spec-like attachment
adnom-poss-spec-dep-non-aff-head-aff-hf=Dep non-affixally marked, head affixally, free wo poss construction w spec-like attachment
adnom-poss-spec-dep-non-aff-head-aff-free-wo=Dep non-affixally marked, head affixally, free wo poss construction w spec-like attachment
adnom-poss-spec-dep-non-aff-head-aff-hf-agr-mut=Dep non-affixally marked, head affixally, both agreeing, head final poss construction w spec-like attachment
adnom-poss-spec-dep-non-aff-head-aff-hf-agr-dep=Dep non-affixally marked, head affixally, dep agreeing, head final poss construction w spec-like attachment
adnom-poss-spec-dep-non-aff-head-aff-hf-agr-head=Dep non-affixally marked, head affixally, head agreeing, head final poss construction w spec-like attachment
adnom-poss-spec-dep-non-aff-head-non-aff-hf=Dep and head non-affixally marked, head final poss construction w spec-like attachment
adnom-poss-spec-dep-non-aff-head-non-aff-free-wo=Dep and head non-affixally marked, free-wo poss construction w spec-like attachment
adnom-poss-spec-dep-non-aff-head-non-aff-hf-agr-dep=Dep and head non-affixally marked, dep agreeing, head final poss construction w spec-like attachment
adnom-poss-spec-head-aff-hf=Head affixally marked, head final poss construction w spec-like attachment
adnom-poss-spec-head-aff-free-wo=Head affixally marked, free wo poss construction w spec-like attachment
adnom-poss-spec-head-aff-hf-agr=Head affixally marked agreeing, head final poss construction w spec-like attachment
adnom-poss-spec-head-non-aff-hf=Head non-affixally marked, head final poss construction w spec-like attachment
adnom-poss-dep-aff-two-strat-mod-spec-var=Two poss strategies, both dep affixally marked, one mod-like, one spec-like
adnom-poss-spec-dep-aff-two-strat-order-var=Two poss strategies, both dep affixally marked, one head-final, one head initial
adnom-poss-spec-dep-aff-hf-block-pron=Dep affixally marked head final poss construction w spec-like attachment, pronouns disallowed as possessum
adnom-poss-spec-dep-non-aff-hf-block-pron=Dep non-affixally marked head final poss construction w spec-like attachment, pronouns disallowed as possessum
adnom-poss-mod-dep-aff-hf-block-pron=Dep affixally marked head final poss construction w mod-like attachment, pronouns disallowed as possessum
adnom-poss-mod-dep-non-aff-hf-block-pron=Dep non-affixally marked head final poss construction w mod-like attachment, pronouns disallowed as possessum
adnom-poss-spec-dep-non-aff-hf-block-head-pron-only=Dep non-affixally marked head final poss construction w spec-like attachment, pronouns disallowed as possessum, allowed as possessor
adnom-poss-mod-dep-non-aff-hf-block-head-pron-only=Dep non-affixally marked head final poss construction w mod-like attachment, pronouns disallowed as possessum, allowed as possessor
adnom-poss-spec-head-aff-hf-block-head-pron-only=Head affixally marked head final poss construction w mod-like attachment, pronouns disallowed as possessum, allowed as possessor
adnom-poss-spec-head-non-aff-hf-block-head-pron-only=Head non-affixally marked head final poss construction w mod-like attachment, pronouns disallowed as possessum, allowed as possessor
cagr-pseudo-urdu-mixed-agreement=Pseudo-Urdu mixed closest conjunct and feature resolution coordination and agreement grammar
clausalmods-mandarin=an illustrative langauge for clausal modifiers based on mandarin
clausalmods-wambaya=An illustrative grammar for clausal modifiers based on wambaya
adnom-poss-spec-juxt-constraint=Juxtaposition poss construction w spec-like attachment and case constraints on possessor
adnom-poss-spec-juxt-block-pron=Juxtaposition poss construction w spec-like attachment where prons can't be possessor or possessum
adnom-poss-spec-juxt-block-head-pron-only=Juxtaposition poss construction w spec-like attachment where prons can't be head, can be dep
clausalmods-german=an illustrative language for clausal modifiers based on German
adnom-poss-spec-dep-non-aff-hf-constraint=Dep non-affixally marked head final poss construction w spec-like attachment; dep must be nom case.
adnom-poss-spec-head-non-aff-hf-constraint=Head non-affixally marked head final poss construction w spec-like attachment; dep must be nom case.
adnom-poss-mod-head-aff-hf-constraint=Head affixally marked head final poss construction w mod-like attachment; dep must be nom case.
adnom-poss-spec-pron-head-aff-agr=Possessor pronoun accompanied by agreeing affix on possessum
adnom-poss-mod-pron-head-aff-agr=Possessor pronoun accompanied by agreeing affix on possessum
clausalmods-basque=a held out test for clausal modifiers based on basque
clausalmods-lavukaleve=a held out test for clausal modifiers based on lavukaleve
clausalmods-madi=a held out test for clausal modifiers based on ma'di
clausalmods-moseten=a held out test for clausal modifiers based on moseten
clausalmods-uranina=a held out test for clausal modifiers based on uranina
clausalmods-rukai=an illustrative grammar for clausal modifiers based on rukai
adnom-poss-mod-dep-non-aff-head-non-aff-hf-agr-mut=Head non-affixally marked, spec affixally marked, head final poss construction w mod-like attachment, head agr with dep
adnom-poss-mod-dep-non-aff-head-non-aff-hf-sov-right-marker=Head and dep non-affixally mark w mod-like attachment, and only one kind of head-comp order
adnom-poss-mod-dep-non-aff-head-aff-hf-sov-marker-left=Dep non-affixally marked, head affixally marked w mod-like attachment, and possessor marker taking opposite ordering from possessive phrase
adnom-poss-mod-pron-head-non-aff-agr=Mod-like pron strat w head non-affixally marked, agr with dep
adnom-poss-mod-head-non-aff-hf=Mod-like strat, possessum marked w non-affix
adnom-poss-fin=Finnish illustrative test for adnominal possession.
adnom-poss-yor=Yoruba illustrative test for adnominal possession
adnom-poss-jpn=Japanese illustrative test for adnominal possession
adnom-poss-fij=Fijian illustrative test for adnominal possession
adnom-poss-grc=Illustrative test for Ancient Greek
adnom-poss-frr=Solring North Frisian test for adnominal possession
adnom-poss-blr=Plang held-out test for adnominal possession
adnom-poss-kat=Georgian held-out test for adnominal possession
adnom-poss-ztp=Coatlan-Loxicha Zapotec held-out test for adnominal possession
adnom-poss-was=Washo held-out test for adnominal possession
ccomp-heb=Clausal complements h-out Hebrew
ccomp-bxl=Clausal complements held-out Jalkunan
ccomp-pab=Clausal complements held-out: Paresi-Haliti (pab)
ccomp-wgg=Clausal complements held-out Wangkagurru (wgg)
ccomp-yak=Clausal complements held-out: Yakima Sahaptin (yak)
adj-yes-no-cop-aux-inv=auxiliaries and copulas intersecting with yes-no library
adj-yes-no-cop-inv=copulas intersecting with yes-no library
subj-aux-inv-q=yes-no questions with subject auxiliary inversion
wh-svo-sg-oblig-min=Wh-questions: Minimal; SVO, matrix clauses only, one question phrase, obligatory fronting; no info structure or any other choices; no determiners or auxiliaries.
wh2-sov-sg-oblig-min=Wh-questions: Minimal; SOV, matrix clauses only, one question phrase, obligatory fronting; no info structure or any other choices; no determiners or auxiliaries.
wh4-free-sg-oblig-min=Free wo, obligatory single fronting of questions
wh5-free-sg-oblig-det=Free word order but determiners must come before nouns
adv-s-vp-v-min=A minimal test to see underspecified attachment of adverbs.
wh3-vso-sg-oblig-det=Wh-questions in VSO order with Noun-Det, obligatory single fronting
wh6-svo-sg-opt=Optional fronting of one question phrase; SVO word order; adverbs; multiple questions.
wh7-sov-sg-opt=SOV word order, optional fronting of a single question phrase; adverbs; multiple questions.
wh8-ovs-insitu=OVS word order, in-situ wh questionss.
wh9-vos-sg-oblig-ppip-all-oblig=Obligatory pied piping of all types of phrases in a VOS language with single question phrase fronted obligatorily in matrix clauses.
wh10-svo-multi-all-oblig-min=Obligatory fronting of all question phrases in an SVO language.
wh11-svo-multi-one-oblig=Multiple fronting of wh-questions, one being obligatory but the other possible in situ. SVO word order.
wh12-vos-sg-oblig-pied-adp-opt=Obligatory pied piping of nouns and optional of adpositions; VOS word order (constituent questions)
wh13-oblig-particle-osv=Wh-questions via particles; OSV order, obligatory particle
wh14-oblig-imposs-part=Constituent questions; OSV order; two question particles: one occurs with both polar and constituent questions, another only with polar.
wh-dev-mini-japanese=Wh-questions; development languages; mini-japanese (optional particles, in-situ)
wh15-insitu-oblig-part-vfinal=A wh in situ language with the same particle used obligatorily in both polar and wh questions; v-final order.
wh-yux-dev=Small grammar of Yukaghir featuring morphological marking of questions and focus-person split.
wh-dev-ckt-mini=Constituent questions with interrogative verbs (Chukchi)
wh18-aux-inv-both=Auxiliary inversion with both subject and object questions in both main and embedded clauses
wh19-cfocus-marking=Focus marking on question words
wh20-no-cfocus-marking=No focus marking on question words
wh21-embed-insitu=Optional single fronting, but embedded in situ questions are possible.
wh22-no-multi-ques=No multiple wh-questions allowed.
wh23-quesverbs=A mixture of languages featuring interrogative verbs. No morphology or any other phenomena; the point is just to check the semantics of the verbs/
wh24-particles-embed=Obligatory question particle and embedded clauses, think vs. wonder
wh25-no-multi-insitu-morph=In situ wh-questions with optional morphological marking, only one question allowed per clause.
wh-eng-dev=English wh-questions; mainly subj-aux inversion.
!valchg-jpn-rom=A valence change test which has no gold MRS.
wh-dev-rus=Multiple fronting, optional. Large test.
wh16-morph-pol-wh-sep=Separate paradigms for wh- and polar question marking.
wh-apn=Held-out test grammar of Apinaje for wh-questions library. See Zamaraeva's 2021 dissertation Chapter 8.
wh-bxl=Held-out test grammar for wh-questions library. See Zamaraeva's 2021 dissertation Chapter 8.
wh-myh=Held-out test grammar for wh-questions library. See Zamaraev's 2021 dissertation Chapter 8.
wh-pac=Held-out test grammar for wh-questions librarrary. See Zamaraeva's 2021 dissertation, Chapter 8.
wh-pab=Held-out test grammar for wh-questions library. See Zamaraeva's 2021 dissertation, Chapter 8.
wh-pab-sov=Another version of a held-out test language for wh-questions library. This [pab] is with SOV word order, so there is less coverage.
